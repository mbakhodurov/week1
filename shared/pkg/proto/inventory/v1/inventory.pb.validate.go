// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inventory/v1/inventory.proto

package inventory_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdatePartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdatePartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePartRequestMultiError, or nil if none found.
func (m *UpdatePartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetUpdateInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePartRequestValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePartRequestValidationError{
					field:  "UpdateInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePartRequestValidationError{
				field:  "UpdateInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePartRequestMultiError(errors)
	}

	return nil
}

// UpdatePartRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePartRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePartRequestMultiError) AllErrors() []error { return m }

// UpdatePartRequestValidationError is the validation error returned by
// UpdatePartRequest.Validate if the designated constraints aren't met.
type UpdatePartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePartRequestValidationError) ErrorName() string {
	return "UpdatePartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePartRequestValidationError{}

// Validate checks the field values on InventoryUpdateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InventoryUpdateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InventoryUpdateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InventoryUpdateInfoMultiError, or nil if none found.
func (m *InventoryUpdateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *InventoryUpdateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Category

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InventoryUpdateInfoValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManufacturer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Manufacturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Manufacturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManufacturer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InventoryUpdateInfoValidationError{
				field:  "Manufacturer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InventoryUpdateInfoValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetStockQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "StockQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InventoryUpdateInfoValidationError{
					field:  "StockQuantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStockQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InventoryUpdateInfoValidationError{
				field:  "StockQuantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InventoryUpdateInfoMultiError(errors)
	}

	return nil
}

// InventoryUpdateInfoMultiError is an error wrapping multiple validation
// errors returned by InventoryUpdateInfo.ValidateAll() if the designated
// constraints aren't met.
type InventoryUpdateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InventoryUpdateInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InventoryUpdateInfoMultiError) AllErrors() []error { return m }

// InventoryUpdateInfoValidationError is the validation error returned by
// InventoryUpdateInfo.Validate if the designated constraints aren't met.
type InventoryUpdateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryUpdateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryUpdateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryUpdateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryUpdateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryUpdateInfoValidationError) ErrorName() string {
	return "InventoryUpdateInfoValidationError"
}

// Error satisfies the builtin error interface
func (e InventoryUpdateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventoryUpdateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryUpdateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryUpdateInfoValidationError{}

// Validate checks the field values on GetAllPartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllPartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPartRequestMultiError, or nil if none found.
func (m *GetAllPartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllPartRequestMultiError(errors)
	}

	return nil
}

// GetAllPartRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllPartRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllPartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPartRequestMultiError) AllErrors() []error { return m }

// GetAllPartRequestValidationError is the validation error returned by
// GetAllPartRequest.Validate if the designated constraints aren't met.
type GetAllPartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPartRequestValidationError) ErrorName() string {
	return "GetAllPartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPartRequestValidationError{}

// Validate checks the field values on GetAllPartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPartResponseMultiError, or nil if none found.
func (m *GetAllPartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPart() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPartResponseValidationError{
						field:  fmt.Sprintf("Part[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPartResponseValidationError{
						field:  fmt.Sprintf("Part[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPartResponseValidationError{
					field:  fmt.Sprintf("Part[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return GetAllPartResponseMultiError(errors)
	}

	return nil
}

// GetAllPartResponseMultiError is an error wrapping multiple validation errors
// returned by GetAllPartResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAllPartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPartResponseMultiError) AllErrors() []error { return m }

// GetAllPartResponseValidationError is the validation error returned by
// GetAllPartResponse.Validate if the designated constraints aren't met.
type GetAllPartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPartResponseValidationError) ErrorName() string {
	return "GetAllPartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPartResponseValidationError{}

// Validate checks the field values on DeletePartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePartRequestMultiError, or nil if none found.
func (m *DeletePartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return DeletePartRequestMultiError(errors)
	}

	return nil
}

// DeletePartRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePartRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePartRequestMultiError) AllErrors() []error { return m }

// DeletePartRequestValidationError is the validation error returned by
// DeletePartRequest.Validate if the designated constraints aren't met.
type DeletePartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePartRequestValidationError) ErrorName() string {
	return "DeletePartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePartRequestValidationError{}

// Validate checks the field values on CreatePartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartsRequestMultiError, or nil if none found.
func (m *CreatePartsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePartsRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePartsRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePartsRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePartsRequestMultiError(errors)
	}

	return nil
}

// CreatePartsRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePartsRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePartsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartsRequestMultiError) AllErrors() []error { return m }

// CreatePartsRequestValidationError is the validation error returned by
// CreatePartsRequest.Validate if the designated constraints aren't met.
type CreatePartsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartsRequestValidationError) ErrorName() string {
	return "CreatePartsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartsRequestValidationError{}

// Validate checks the field values on CreatePartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePartsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePartsResponseMultiError, or nil if none found.
func (m *CreatePartsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePartsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return CreatePartsResponseMultiError(errors)
	}

	return nil
}

// CreatePartsResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePartsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePartsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePartsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePartsResponseMultiError) AllErrors() []error { return m }

// CreatePartsResponseValidationError is the validation error returned by
// CreatePartsResponse.Validate if the designated constraints aren't met.
type CreatePartsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePartsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePartsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePartsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePartsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePartsResponseValidationError) ErrorName() string {
	return "CreatePartsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePartsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePartsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePartsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePartsResponseValidationError{}

// Validate checks the field values on ListPartsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPartsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPartsRequestMultiError, or nil if none found.
func (m *ListPartsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPartsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPartsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPartsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPartsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPartsRequestMultiError(errors)
	}

	return nil
}

// ListPartsRequestMultiError is an error wrapping multiple validation errors
// returned by ListPartsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPartsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPartsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPartsRequestMultiError) AllErrors() []error { return m }

// ListPartsRequestValidationError is the validation error returned by
// ListPartsRequest.Validate if the designated constraints aren't met.
type ListPartsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPartsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPartsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPartsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPartsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPartsRequestValidationError) ErrorName() string { return "ListPartsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPartsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPartsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPartsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPartsRequestValidationError{}

// Validate checks the field values on ListPartsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPartsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPartsResponseMultiError, or nil if none found.
func (m *ListPartsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPartsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPart() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPartsResponseValidationError{
						field:  fmt.Sprintf("Part[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPartsResponseValidationError{
						field:  fmt.Sprintf("Part[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPartsResponseValidationError{
					field:  fmt.Sprintf("Part[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListPartsResponseMultiError(errors)
	}

	return nil
}

// ListPartsResponseMultiError is an error wrapping multiple validation errors
// returned by ListPartsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPartsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPartsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPartsResponseMultiError) AllErrors() []error { return m }

// ListPartsResponseValidationError is the validation error returned by
// ListPartsResponse.Validate if the designated constraints aren't met.
type ListPartsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPartsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPartsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPartsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPartsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPartsResponseValidationError) ErrorName() string {
	return "ListPartsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPartsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPartsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPartsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPartsResponseValidationError{}

// Validate checks the field values on GetPartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPartRequestMultiError,
// or nil if none found.
func (m *GetPartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetPartRequestMultiError(errors)
	}

	return nil
}

// GetPartRequestMultiError is an error wrapping multiple validation errors
// returned by GetPartRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartRequestMultiError) AllErrors() []error { return m }

// GetPartRequestValidationError is the validation error returned by
// GetPartRequest.Validate if the designated constraints aren't met.
type GetPartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartRequestValidationError) ErrorName() string { return "GetPartRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartRequestValidationError{}

// Validate checks the field values on GetPartResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPartResponseMultiError, or nil if none found.
func (m *GetPartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPartResponseValidationError{
					field:  "Part",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPartResponseValidationError{
					field:  "Part",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPartResponseValidationError{
				field:  "Part",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPartResponseMultiError(errors)
	}

	return nil
}

// GetPartResponseMultiError is an error wrapping multiple validation errors
// returned by GetPartResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPartResponseMultiError) AllErrors() []error { return m }

// GetPartResponseValidationError is the validation error returned by
// GetPartResponse.Validate if the designated constraints aren't met.
type GetPartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPartResponseValidationError) ErrorName() string { return "GetPartResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPartResponseValidationError{}

// Validate checks the field values on Part with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Part) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Part with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PartMultiError, or nil if none found.
func (m *Part) ValidateAll() error {
	return m.validate(true)
}

func (m *Part) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PartMultiError(errors)
	}

	return nil
}

// PartMultiError is an error wrapping multiple validation errors returned by
// Part.ValidateAll() if the designated constraints aren't met.
type PartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartMultiError) AllErrors() []error { return m }

// PartValidationError is the validation error returned by Part.Validate if the
// designated constraints aren't met.
type PartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartValidationError) ErrorName() string { return "PartValidationError" }

// Error satisfies the builtin error interface
func (e PartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartValidationError{}

// Validate checks the field values on PartInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartInfoMultiError, or nil
// if none found.
func (m *PartInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PartInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := PartInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for StockQuantity

	// no validation rules for Category

	if all {
		switch v := interface{}(m.GetDimensions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartInfoValidationError{
					field:  "Dimensions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartInfoValidationError{
					field:  "Dimensions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDimensions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartInfoValidationError{
				field:  "Dimensions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManufacturer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PartInfoValidationError{
					field:  "Manufacturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PartInfoValidationError{
					field:  "Manufacturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManufacturer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PartInfoValidationError{
				field:  "Manufacturer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMetadata()))
		i := 0
		for key := range m.GetMetadata() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetadata()[key]
			_ = val

			// no validation rules for Metadata[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PartInfoValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PartInfoValidationError{
							field:  fmt.Sprintf("Metadata[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PartInfoValidationError{
						field:  fmt.Sprintf("Metadata[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PartInfoMultiError(errors)
	}

	return nil
}

// PartInfoMultiError is an error wrapping multiple validation errors returned
// by PartInfo.ValidateAll() if the designated constraints aren't met.
type PartInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartInfoMultiError) AllErrors() []error { return m }

// PartInfoValidationError is the validation error returned by
// PartInfo.Validate if the designated constraints aren't met.
type PartInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartInfoValidationError) ErrorName() string { return "PartInfoValidationError" }

// Error satisfies the builtin error interface
func (e PartInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartInfoValidationError{}

// Validate checks the field values on PartsFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PartsFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PartsFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartsFilterMultiError, or
// nil if none found.
func (m *PartsFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *PartsFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PartsFilterMultiError(errors)
	}

	return nil
}

// PartsFilterMultiError is an error wrapping multiple validation errors
// returned by PartsFilter.ValidateAll() if the designated constraints aren't met.
type PartsFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartsFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartsFilterMultiError) AllErrors() []error { return m }

// PartsFilterValidationError is the validation error returned by
// PartsFilter.Validate if the designated constraints aren't met.
type PartsFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartsFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartsFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartsFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartsFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartsFilterValidationError) ErrorName() string { return "PartsFilterValidationError" }

// Error satisfies the builtin error interface
func (e PartsFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartsFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartsFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartsFilterValidationError{}

// Validate checks the field values on Dimensions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dimensions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dimensions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DimensionsMultiError, or
// nil if none found.
func (m *Dimensions) ValidateAll() error {
	return m.validate(true)
}

func (m *Dimensions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Length

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Weight

	if len(errors) > 0 {
		return DimensionsMultiError(errors)
	}

	return nil
}

// DimensionsMultiError is an error wrapping multiple validation errors
// returned by Dimensions.ValidateAll() if the designated constraints aren't met.
type DimensionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DimensionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DimensionsMultiError) AllErrors() []error { return m }

// DimensionsValidationError is the validation error returned by
// Dimensions.Validate if the designated constraints aren't met.
type DimensionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DimensionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DimensionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DimensionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DimensionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DimensionsValidationError) ErrorName() string { return "DimensionsValidationError" }

// Error satisfies the builtin error interface
func (e DimensionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDimensions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DimensionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DimensionsValidationError{}

// Validate checks the field values on Manufacturer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Manufacturer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Manufacturer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ManufacturerMultiError, or
// nil if none found.
func (m *Manufacturer) ValidateAll() error {
	return m.validate(true)
}

func (m *Manufacturer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Country

	// no validation rules for Website

	if len(errors) > 0 {
		return ManufacturerMultiError(errors)
	}

	return nil
}

// ManufacturerMultiError is an error wrapping multiple validation errors
// returned by Manufacturer.ValidateAll() if the designated constraints aren't met.
type ManufacturerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManufacturerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManufacturerMultiError) AllErrors() []error { return m }

// ManufacturerValidationError is the validation error returned by
// Manufacturer.Validate if the designated constraints aren't met.
type ManufacturerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManufacturerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManufacturerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManufacturerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManufacturerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManufacturerValidationError) ErrorName() string { return "ManufacturerValidationError" }

// Error satisfies the builtin error interface
func (e ManufacturerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManufacturer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManufacturerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManufacturerValidationError{}

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *Value_StringValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Value_Int64Value:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64Value
	case *Value_DoubleValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DoubleValue
	case *Value_BoolValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}
